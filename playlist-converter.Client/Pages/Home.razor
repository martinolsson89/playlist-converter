@page "/"
@using System.Text.Json
@using PlaylistConverter.Client.Services
@using PlaylistConverter.Shared.Models.Auth
@using PlaylistConverter.Shared.Models.Youtube
@inject TokenService Tokens
@inject PlaylistConverterService Api
@attribute [RouteAttribute("/home")]

<div class="playlist-container">
    <h1 class="brand-title">🎵 Playlist Converter</h1>

    @if (!Tokens.IsAuthenticated)
    {
        <div class="alert-info-modern">
            <div>
                <strong>🔐 Authentication Required</strong><br>
                You need to connect your YouTube account to start converting playlists.
            </div>
            <div class="mt-3">
                <a href="login" class="btn btn-youtube btn-modern">
                    <svg class="step-icon" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z" />
                    </svg>
                    Connect YouTube
                </a>
            </div>
        </div>
    }
    else
    {
        <div class="status-badge fade-in">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z" />
            </svg>
            Connected to YouTube
            <button class="btn btn-link btn-sm p-0 ms-2" style="color: #721c24;" @onclick="Logout">Logout</button>
        </div>

        <!-- Step 1: Spotify -->
        <div class="step-card fade-in">
            <div class="step-header">
                <svg class="step-icon" viewBox="0 0 24 24" fill="#1db954">
                    <path d="M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.66 0 12 0zm5.521 17.34c-.24.359-.66.48-1.021.24-2.82-1.74-6.36-2.101-10.561-1.141-.418.122-.779-.179-.899-.539-.12-.421.18-.78.54-.9 4.56-1.021 8.52-.6 11.64 1.32.42.18.479.659.301 1.02zm1.44-3.3c-.301.42-.841.6-1.262.3-3.239-1.98-8.159-2.58-11.939-1.38-.479.12-1.02-.12-1.14-.6-.12-.48.12-1.021.6-1.141C9.6 9.9 15.18 10.561 18.72 12.84c.361.181.54.78.241 1.2zm.12-3.36C15.24 8.4 8.82 8.16 5.16 9.301c-.6.179-1.2-.181-1.38-.721-.18-.601.18-1.2.72-1.381 4.26-1.26 11.28-1.02 15.721 1.621.539.3.719 1.02.42 1.56-.299.421-1.02.599-1.559.3z" />
                </svg>
                Step 1: Import from Spotify
            </div>
            <div class="step-body">
                <div class="mb-3">
                    <label class="form-label fw-medium">Spotify Playlist URL or ID</label>
                    <input class="form-control" @bind="SpotifyPlaylistUrl"
                           placeholder="https://open.spotify.com/playlist/... or playlist ID" />
                </div>
                <button class="btn btn-spotify btn-modern"
                        disabled="@(!CanLoadSpotify || IsLoadingSpotify)"
                        @onclick="LoadSpotifyPlaylist">
                    @if (IsLoadingSpotify)
                    {
                        <span class="loading-spinner"></span>
                        <span>Loading...</span>
                    }
                    else
                    {
                        <span>Load Playlist</span>
                    }
                </button>

                @if (!string.IsNullOrEmpty(SpotifyError))
                {
                    <div class="alert-danger-modern alert-modern fade-in">@SpotifyError</div>
                }

                @if (SpotifyTracks?.Count > 0)
                {
                    <div class="mt-4 fade-in">
                        <h6 class="fw-bold mb-3">📝 @SpotifyPlaylistName (@(SpotifyTracks.Count) tracks)</h6>
                        <div class="track-list">
                            @foreach (var track in SpotifyTracks.Take(15))
                            {
                                <div class="track-item">
                                    🎵 @track
                                </div>
                            }
                        </div>
                        @if (SpotifyTracks.Count > 15)
                        {
                            <div class="mt-2 text-muted small text-center">
                                ...and @(SpotifyTracks.Count - 15) more tracks
                            </div>
                        }
                    </div>
                }
            </div>
        </div>

        <!-- Step 2: YouTube -->
        <div class="step-card fade-in">
            <div class="step-header">
                <svg class="step-icon" viewBox="0 0 24 24" fill="#ff0000">
                    <path d="M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z" />
                </svg>
                Step 2: Create YouTube Playlist
            </div>
            <div class="step-body">
                <div class="row g-3">
                    <div class="col-md-6">
                        <label class="form-label fw-medium">Playlist Title</label>
                        <input class="form-control" @bind="YoutubeTitle"
                               placeholder="My Awesome Playlist" />
                    </div>
                    <div class="col-md-3">
                        <label class="form-label fw-medium">Privacy</label>
                        <select class="form-select" @bind="YoutubePrivacy">
                            <option value="private">🔒 Private</option>
                            <option value="unlisted">🔗 Unlisted</option>
                            <option value="public">🌍 Public</option>
                        </select>
                    </div>
                    <div class="col-md-3 d-flex align-items-end">
                        <button class="btn btn-youtube btn-modern w-100"
                                disabled="@(!CanCreateYoutube || CreatingYoutube)"
                                @onclick="CreateYoutubePlaylist">
                            @if (CreatingYoutube)
                            {
                                <span class="loading-spinner"></span>
                                <span>Creating...</span>
                            }
                            else
                            {
                                <span>@(CreatedYoutubePlaylistId is null ? "Create Playlist" : "Recreate")</span>
                            }
                        </button>
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(CreateError))
                {
                    <div class="alert-danger-modern alert-modern fade-in">@CreateError</div>
                }

                @if (CreatedYoutubePlaylistId is not null)
                {
                    <div class="alert-success-modern alert-modern fade-in">
                        <strong>✅ Playlist Created!</strong><br>
                        YouTube Playlist ID: <code>@CreatedYoutubePlaylistId</code>
                    </div>
                }
            </div>
        </div>

        <!-- Step 3: Transfer -->
        <div class="step-card fade-in">
            <div class="step-header">
                <svg class="step-icon" viewBox="0 0 24 24" fill="#6c5ce7">
                    <path d="M16.59 9H15V4c0-.55-.45-1-1-1s-1 .45-1 1v5H9.41c-.89 0-1.34 1.08-.71 1.71l2.59 2.59c.39.39 1.02.39 1.41 0l2.59-2.59c.63-.63.19-1.71-.7-1.71zM5 19c0 .55.45 1 1 1h12c.55 0 1-.45 1-1s-.45-1-1-1H6c-.55 0-1 .45-1 1z" />
                </svg>
                Step 3: Transfer Tracks
            </div>
            <div class="step-body">
                <button class="btn btn-transfer btn-modern"
                        disabled="@(!CanTransfer || Transferring)"
                        @onclick="TransferTracks">
                    @if (Transferring)
                    {
                        <span class="loading-spinner"></span>
                        <span>Transferring tracks...</span>
                    }
                    else
                    {
                        <span>🚀 Transfer All Tracks</span>
                    }
                </button>

                @if (!string.IsNullOrEmpty(TransferError))
                {
                    <div class="alert-danger-modern alert-modern fade-in">@TransferError</div>
                }

                @if (IsTransferDone && string.IsNullOrEmpty(TransferError))
                {
                    <div class="alert-success-modern alert-modern fade-in">
                        <strong>🎉 Transfer Complete!</strong><br>
                        Your playlist is ready:
                        <a class="playlist-url" href="@YoutubePlaylistUrl" target="_blank" rel="noopener">
                            @YoutubePlaylistUrl
                        </a>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    // Step 1
    private string SpotifyPlaylistUrl = "";
    private bool IsLoadingSpotify;
    private string? SpotifyError;
    private string? SpotifyPlaylistName;
    private List<string> SpotifyTracks = new();

    // Step 2
    private string YoutubeTitle = "";
    private string YoutubePrivacy = "private";
    private bool CreatingYoutube;
    private string? CreateError;
    private string? CreatedYoutubePlaylistId;

    // Step 3
    private bool Transferring;
    private string? TransferError;
    private TransferResponse? TransferResult;
    private string YoutubePlaylistUrl => $"https://www.youtube.com/playlist?list={CreatedYoutubePlaylistId}";
    private bool IsTransferDone = false;

    private bool CanLoadSpotify => !string.IsNullOrWhiteSpace(SpotifyPlaylistUrl);
    private bool CanCreateYoutube => !string.IsNullOrWhiteSpace(YoutubeTitle) && SpotifyTracks.Count > 0 && Tokens.IsAuthenticated;
    private bool CanTransfer => CreatedYoutubePlaylistId is not null && SpotifyTracks.Count > 0 && Tokens.IsAuthenticated && !Transferring;

    private async Task LoadSpotifyPlaylist()
    {
        SpotifyError = null;
        SpotifyTracks.Clear();
        SpotifyPlaylistName = null;
        CreatedYoutubePlaylistId = null;
        TransferResult = null;

        if (!CanLoadSpotify) return;
        IsLoadingSpotify = true;
        try
        {
            var list = await Api.GetSpotifyPlaylistAsync(SpotifyPlaylistUrl);
            if (list is null || list.Count == 0)
            {
                SpotifyError = "Playlist not found or empty.";
                return;
            }

            SpotifyPlaylistName = list[0];
            SpotifyTracks = list.Skip(1).ToList();

            if (string.IsNullOrWhiteSpace(YoutubeTitle))
                YoutubeTitle = SpotifyPlaylistName + " (Copy)";
        }
        catch (Exception ex)
        {
            SpotifyError = ex.Message;
        }
        finally
        {
            IsLoadingSpotify = false;
        }
    }

    private async Task CreateYoutubePlaylist()
    {
        if (!CanCreateYoutube) return;
        CreateError = null;
        TransferResult = null;
        CreatingYoutube = true;
        try
        {
            var req = new CreatePlaylistRequest
            {
                Title = YoutubeTitle.Trim(),
                PrivacyStatus = YoutubePrivacy,
                AccessToken = Tokens.YoutubeToken!
            };
            CreatedYoutubePlaylistId = await Api.CreateYoutubePlaylistAsync(req);
        }
        catch (Exception ex)
        {
            CreateError = ex.Message;
            CreatedYoutubePlaylistId = null;
        }
        finally
        {
            CreatingYoutube = false;
        }
    }

    private async Task TransferTracks()
    {
        if (!CanTransfer || CreatedYoutubePlaylistId is null) return;
        TransferError = null;
        TransferResult = null;
        Transferring = true;
        try
        {
            var spotifyId = ExtractSpotifyId(SpotifyPlaylistUrl);
            var result = await Api.AddFromSpotifyAsync(new AddFromSpotifyRequest
            {
                SpotifyPlaylistId = spotifyId,
                YouTubePlaylistId = CreatedYoutubePlaylistId,
                YouTubeAccessToken = Tokens.YoutubeToken!
            });
        }
        catch (Exception ex)
        {
            TransferError = ex.Message;
        }
        finally
        {
            Transferring = false;
            IsTransferDone = true;
        }
    }

    private string ExtractSpotifyId(string input)
    {
        if (string.IsNullOrWhiteSpace(input)) return "";
        input = Uri.UnescapeDataString(input);
        if (!input.Contains("/")) return input;
        if (input.StartsWith("spotify:playlist:"))
            return input.Split(':')[2];
        try
        {
            var uri = new Uri(input);
            var segments = uri.AbsolutePath.Split('/', StringSplitOptions.RemoveEmptyEntries);
            var idx = Array.FindIndex(segments, s => s.Equals("playlist", StringComparison.OrdinalIgnoreCase));
            if (idx >= 0 && idx < segments.Length - 1)
                return segments[idx + 1];
        }
        catch
        {
        }

        return input;
    }

    private void Logout()
    {
        Tokens.YoutubeToken = null;
    }

    // Helper models
    private class TransferResponse
    {
        public int TotalTracks { get; set; }
        public int SuccessfullyAdded { get; set; }
        public List<TrackTransferDetail> Results { get; set; } = new();
    }

    private class TrackTransferDetail
    {
        public string? Track { get; set; }
        public string? VideoId { get; set; }
        public string? Status { get; set; }
        public string? Error { get; set; }
    }
}